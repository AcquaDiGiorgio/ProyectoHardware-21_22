


ARM Macro Assembler    Page 1 


    1 00000000         ;;;; AUTORES: Jorge Lisa y David Zandundo
    2 00000000         ;;;; ASIGNATURA: Proyecto Hardware del Grado en Ingenier
                       ía Informática
    3 00000000         ;;;; Escuela de Ingeniería y Arquitectura - Universidad 
                       de Zaragoza
    4 00000000         ;;;; FECHA: octubre de 2021 
    5 00000000         ;;;; FICHERO: candidatos_actualizar_arm.s
    6 00000000         ;;;; DESCRIPCIÓN: funcion candidatos_actualizar_arm de l
                       a práctica 1
    7 00000000         
    8 00000000                 AREA             candidatos_actualizar_arm, CODE
, READONLY
    9 00000000                 EXPORT           candidatos_actualizar_arm
   10 00000000                 IMPORT           candidatos_propagar_arm
   11 00000000         
   12 00000000         ; Calcula todas las listas de candidatos (9x9)
   13 00000000         ; necesario tras borrar o cambiar un valor (listas corro
                       mpidas)
   14 00000000         
   15 00000000         ; Recibe la cuadricula como primer parametro
   16 00000000         ; y devuelve el numero de celdas vacias
   17 00000000         
   18 00000000 E1A0C00D        MOV              IP,SP
   19 00000004 E92D5FF0        STMDB            SP!,{R4-R10,FP,IP,LR}
   20 00000008         
   21 00000008         ; INICIALIZACION
   22 00000008 E1A06000        MOV              R6,R0       ;R0=entrada     R6=
                                                            cuadricula
   23 0000000C E3A07000        MOV              R7,#0x0     ;R7=celdas_vacias
   24 00000010 E3A04000        MOV              R4,#0x0     ;R4=i
   25 00000014 E3A05000        MOV              R5,#0x0     ;R5=j
   26 00000018         ; EJECUCION
   27 00000018         bucle1
   28 00000018 E0861284        ADD              R1,R6,R4,LSL #5 ;mete en r1 val
                                                            or de cuadricula + 
                                                            (i desplazado 5 izq
                                                            )
   29 0000001C E0811085        ADD              R1,R1,R5,LSL #1 ;mete en r1 val
                                                            or de r1 + (j despl
                                                            azado 1)
   30 00000020 E5D10000        LDRB             R0,[R1]     ;mete en r0 el valo
                                                            r de r0 + [j despla
                                                            zado 1 izq]
   31 00000024 E200007F        AND              R0,R0,#0x7F ;and r0 0x007F
   32 00000028 E1C100B0        STRH             R0,[R1]     ;guarda en [r1] ½ p
                                                            alabra de r0 (valor
                                                             de la celda)
   33 0000002C         
   34 0000002C E2855001        ADD              R5,R5,#0x1  ;guarda en r0 j++
   35 00000030 E3550009        CMP              R5,#0x9     ;compara j con 16
   36 00000034 BAFFFFF7        BLT              bucle1      ;salta a la primera
                                                             bucle1 si es menor
                                                            
   37 00000038 E3A05000        MOV              R5,#0       ;pone j=0
   38 0000003C         
   39 0000003C E2844001        ADD              R4,R4,#0x1  ;i++
   40 00000040 E3540009        CMP              R4,#0x9     ;comara i con 144 (
                                                            9*16)
   41 00000044 BAFFFFF3        BLT              bucle1      ;salta a bucle1 si 



ARM Macro Assembler    Page 2 


                                                            es menor
   42 00000048 E3A04000        MOV              R4,#0       ;pone i=0
   43 0000004C         
   44 0000004C         bucle2
   45 0000004C E0861284        ADD              R1,R6,R4,LSL #5 ;mete en r0 val
                                                            or de cuadricula + 
                                                            (i desplazado 5 izq
                                                            )
   46 00000050 E0811085        ADD              R1,R1,R5,LSL #1 ;mete en r1 val
                                                            or de r1 + (j despl
                                                            azado 1)
   47 00000054 E1D100B0        LDRH             R0,[R1]     ;mete en r0 el valo
                                                            r de r0 + [j despla
                                                            zado 1 izq]
   48 00000058         
   49 00000058 E200000F        AND              R0,R0,#0xF  ;sacamos el valor n
                                                            úmero que contiene 
                                                            la celda
   50 0000005C E3500000        CMP              R0,#0x0     ;celda contiene un 
                                                            0
   51 00000060 02877001        ADDEQ            R7,R7,#1    ;celdas_vacias++ si
                                                             no es pista
   52 00000064         
   53 00000064 11A00006        MOVNE            R0,R6
   54 00000068 11A01004        MOVNE            R1,R4
   55 0000006C 11A02005        MOVNE            R2,R5
   56 00000070         
   57 00000070 1BFFFFFE        BLNE             candidatos_propagar_arm ;llama 
                                                            a candidatos_propag
                                                            ar_arm si es pista
   58 00000074         
   59 00000074 E2855001        ADD              R5,R5,#0x1  ;j++
   60 00000078 E3550009        CMP              R5,#0x9     ;compara j con 9
   61 0000007C BAFFFFF2        BLT              bucle2      ;salta a la primera
                                                             bucle2 si es menor
                                                            
   62 00000080 E3A05000        MOV              R5,#0       ;pone j=0
   63 00000084         
   64 00000084 E2844001        ADD              R4,R4,#0x1  ;i++
   65 00000088 E3540009        CMP              R4,#0x9     ;comara i con 9
   66 0000008C BAFFFFEE        BLT              bucle2      ;salta a bucle2 si 
                                                            es menor
   67 00000090         
   68 00000090 E1A00007        MOV              R0, R7      ;pone en r0 (return
                                                            ) celdas_vacias
   69 00000094 E89DAFF0        LDMIA            SP,{R4-R10,FP,SP,PC}
   70 00000098         
   71 00000098                 END
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\o
bjects\candidatos_actualizar_arm.d -o.\objects\candidatos_actualizar_arm.o -IC:
\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Phili
ps --predefine="__EVAL SETA 1" --predefine="__UVISION_VERSION SETA 526" --list=
.\listings\candidatos_actualizar_arm.lst candidatos_actualizar_arm.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

bucle1 00000018

Symbol: bucle1
   Definitions
      At line 27 in file candidatos_actualizar_arm.s
   Uses
      At line 36 in file candidatos_actualizar_arm.s
      At line 41 in file candidatos_actualizar_arm.s

bucle2 0000004C

Symbol: bucle2
   Definitions
      At line 44 in file candidatos_actualizar_arm.s
   Uses
      At line 61 in file candidatos_actualizar_arm.s
      At line 66 in file candidatos_actualizar_arm.s

candidatos_actualizar_arm 00000000

Symbol: candidatos_actualizar_arm
   Definitions
      At line 8 in file candidatos_actualizar_arm.s
   Uses
      At line 9 in file candidatos_actualizar_arm.s
Comment: candidatos_actualizar_arm used once
3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

candidatos_propagar_arm 00000000

Symbol: candidatos_propagar_arm
   Definitions
      At line 10 in file candidatos_actualizar_arm.s
   Uses
      At line 57 in file candidatos_actualizar_arm.s
Comment: candidatos_propagar_arm used once
1 symbol
336 symbols in table
