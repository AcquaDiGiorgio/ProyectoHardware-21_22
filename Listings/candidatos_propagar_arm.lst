


ARM Macro Assembler    Page 1 


    1 00000000         ;;;; AUTORES: Jorge Lisa y David Zandundo
    2 00000000         ;;;; ASIGNATURA: Proyecto Hardware del Grado en Ingenier
                       ía Informática
    3 00000000         ;;;; Escuela de Ingeniería y Arquitectura - Universidad 
                       de Zaragoza
    4 00000000         ;;;; FECHA: octubre de 2021
    5 00000000         ;;;; FICHERO: candidatos_propagar_arm.s
    6 00000000         ;;;; DESCRIPCIÓN: funcion candidatos_propagar_arm de la 
                       práctica 1
    7 00000000         
    8 00000000                 AREA             candidatos_propagar_arm, CODE, 
READONLY
    9 00000000                 EXPORT           candidatos_propagar_arm
   10 00000000         
   11 00000000         ; Propaga el valor de una determinada celda
   12 00000000         ; para actualizar las listas de candidatos
   13 00000000         ; de las celdas en su su fila, columna y region
   14 00000000         
   15 00000000         ; Recibe como parametro la cuadricula, y la fila y colum
                       na de
   16 00000000         ; la celda a propagar; no devuelve nada
   17 00000000         
   18 00000000 E1A0C00D        MOV              IP,SP
   19 00000004 E92D5FF0        STMDB            SP!,{R4-R10,FP,IP,LR}
   20 00000008         
   21 00000008         ; INICIALIZACION
   22 00000008 E1A06000        MOV              R6,R0       ;R0=entrada    R6=c
                                                            uadricula
   23 0000000C E1A07001        MOV              R7,R1       ;R1=entrada    R7=f
                                                            ila
   24 00000010 E1A08002        MOV              R8,R2       ;R2=entrada    R8=c
                                                            olumna
   25 00000014 E3A04000        MOV              R4,#0x0     ;R4=i
   26 00000018 E3A05000        MOV              R5,#0x0     ;R5=j
   27 0000001C         
   28 0000001C         ; leer valor
   29 0000001C E086C287        ADD              R12,R6,R7,LSL #5
   30 00000020 E08C0088        ADD              R0,R12,R8,LSL #1 ;R0=dir(celda[
                                                            fila][columna])
   31 00000024 E5D00000        LDRB             R0,[R0]     ;mete en r4 el prim
                                                            er byte de dir(celd
                                                            a[fila][columna])
   32 00000028 E200300F        AND              R3,R0,#0xF  ;R9 = valor(celda[f
                                                            ila][columna]) en e
                                                            l que estamos
   33 0000002C         
   34 0000002C E3A0A001        MOV              R10, #0x1
   35 00000030         ;celda_eliminar candidato
   36 00000030         bucle_columnas
   37 00000030 E08C9085        ADD              R9,R12,R5,LSL #1
   38 00000034 E1D900B0        LDRH             R0,[R9]     ;mete en r4 el prim
                                                            er byte de la celda
                                                                
   39 00000038         ;eliminar candidato
   40 00000038 E2831006        ADD              R1, R3, #6  ;R3 = valor celda  
                                                            
   41 0000003C E1A0111A        MOV              R1, R10, LSL R1
   42 00000040 E1800001        ORR              R0, R0, R1
   43 00000044 E1C900B0        STRH             R0, [R9]



ARM Macro Assembler    Page 2 


   44 00000048         
   45 00000048         
   46 00000048         ; bucle check
   47 00000048 E2855001        ADD              R5, R5, #0x1
   48 0000004C E3550009        CMP              R5, #0x9
   49 00000050 BAFFFFF6        BLT              bucle_columnas
   50 00000054         
   51 00000054 E086C088        ADD              R12,R6,R8,LSL #1
   52 00000058         
   53 00000058 E3A0A001        MOV              R10, #0x1
   54 0000005C         bucle_filas
   55 0000005C E08C9284        ADD              R9,R12,R4,LSL #5
   56 00000060 E1D900B0        LDRH             R0,[R9]     ;mete en r4 el prim
                                                            er byte de la celda
                                                                
   57 00000064         ;eliminar candidato
   58 00000064 E2831006        ADD              R1, R3, #6  ;R3 = valor celda  
                                                             
   59 00000068 E1A0111A        MOV              R1, R10, LSL R1
   60 0000006C E1800001        ORR              R0, R0, R1
   61 00000070 E1C900B0        STRH             R0, [R9]
   62 00000074         
   63 00000074         ; bucle check
   64 00000074 E2844001        ADD              R4, R4, #0x1
   65 00000078 E3540009        CMP              R4, #0x9
   66 0000007C BAFFFFF6        BLT              bucle_filas
   67 00000080         
   68 00000080         ;inicializacion i y j
   69 00000080 E3A01000        MOV              R1,#0       ;init_i
   70 00000084 E3A02000        MOV              R2,#0       ;end_i
   71 00000088 E3A0A000        MOV              R10,#0      ;init_j
   72 0000008C E3A0B000        MOV              R11,#0      ;end_j
   73 00000090         
   74 00000090         ;init_i = init_region[fila];
   75 00000090 E3570003        CMP              R7,#3       ;comparamos fila>=3
                                                            
   76 00000094 23A01003        MOVHS            R1,#3       ;init_i = init_regi
                                                            on[fila];
   77 00000098 E3570006        CMP              R7,#6       ;comparamos fila>=6
                                                            
   78 0000009C 23A01006        MOVHS            R1,#6
   79 000000A0 E2812003        ADD              R2,R1,#3    ;end_i = init_i + 3
                                                            ;
   80 000000A4         
   81 000000A4         ;init_j = init_region[columna];
   82 000000A4 E3580003        CMP              R8,#3       ;comparamos fila<6
   83 000000A8 23A0A003        MOVHS            R10,#3      ;init_j = init_regi
                                                            on[columna];     
   84 000000AC E3580006        CMP              R8,#6       ;comparamos fila<6
   85 000000B0 23A0A006        MOVHS            R10,#6
   86 000000B4 E28AB003        ADD              R11,R10,#3  ;end_j = init_j + 3
                                                            ;
   87 000000B8         
   88 000000B8         ;ini de la cuadricula a cuadricula[init_i][init_j]
   89 000000B8 E1A04001        MOV              R4,R1       ;i=init_i
   90 000000BC E1A0500A        MOV              R5,R10      ;j=init_j
   91 000000C0 E3A08001        MOV              R8,#0x1
   92 000000C4         
   93 000000C4         ; recorrer region descartando valor de listas candidatos



ARM Macro Assembler    Page 3 


                       
   94 000000C4         bucle_cuadrado
   95 000000C4 E0869284        ADD              R9,R6,R4,LSL #5
   96 000000C8 E0899085        ADD              R9,R9,R5,LSL #1
   97 000000CC E1D900B0        LDRH             R0,[R9]     ;mete en r0 el cont
                                                            enido de la celda 
   98 000000D0         ;eliminar candidato
   99 000000D0 E2837006        ADD              R7,R3,#6    ;(7 + valor - 1) ==
                                                             (7 - 1 + valor) ==
                                                             (6 + valor)
  100 000000D4 E1A07718        MOV              R7,R8,LSL R7
  101 000000D8 E1800007        ORR              R0,R0,R7    ;Pone en R0 el cont
                                                            enido anterior | 0x
                                                            1 desplazado
  102 000000DC E1C900B0        STRH             R0,[R9]     ;Guarda el calculo 
                                                            anterior en memoria
                                                             de R9
  103 000000E0         
  104 000000E0         ; bucle check
  105 000000E0 E2844001        ADD              R4,R4,#0x1
  106 000000E4 E1540002        CMP              R4,R2
  107 000000E8 BAFFFFF5        BLT              bucle_cuadrado
  108 000000EC E1A04001        MOV              R4,R1
  109 000000F0 E2855001        ADD              R5,R5,#0x1
  110 000000F4 E155000B        CMP              R5,R11
  111 000000F8 BAFFFFF1        BLT              bucle_cuadrado
  112 000000FC         
  113 000000FC E3A00000        MOV              R0,#0x0
  114 00000100 E89DAFF0        LDMIA            SP,{R4-R10,FP,SP,PC}
  115 00000104                 END
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\o
bjects\candidatos_propagar_arm.d -o.\objects\candidatos_propagar_arm.o -IC:\Kei
l_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Philips -
-predefine="__EVAL SETA 1" --predefine="__UVISION_VERSION SETA 526" --list=.\li
stings\candidatos_propagar_arm.lst candidatos_propagar_arm.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

bucle_columnas 00000030

Symbol: bucle_columnas
   Definitions
      At line 36 in file candidatos_propagar_arm.s
   Uses
      At line 49 in file candidatos_propagar_arm.s
Comment: bucle_columnas used once
bucle_cuadrado 000000C4

Symbol: bucle_cuadrado
   Definitions
      At line 94 in file candidatos_propagar_arm.s
   Uses
      At line 107 in file candidatos_propagar_arm.s
      At line 111 in file candidatos_propagar_arm.s

bucle_filas 0000005C

Symbol: bucle_filas
   Definitions
      At line 54 in file candidatos_propagar_arm.s
   Uses
      At line 66 in file candidatos_propagar_arm.s
Comment: bucle_filas used once
candidatos_propagar_arm 00000000

Symbol: candidatos_propagar_arm
   Definitions
      At line 8 in file candidatos_propagar_arm.s
   Uses
      At line 9 in file candidatos_propagar_arm.s
Comment: candidatos_propagar_arm used once
4 symbols
336 symbols in table
